// Code generated by "bitmasker -type SignalMatchType"; DO NOT EDIT.

package enums

import "strconv"

// Has returns TRUE if the given flag is present in the bitmask
func (i SignalMatchType) Has(m SignalMatchType) bool {
	return i&m != 0
}

// Set returns the bitmask with the given flag set
func (i SignalMatchType) Set(m SignalMatchType) SignalMatchType {
	return i | m
}

// Clear returns the bitmask with the given flag removed
func (i SignalMatchType) Clear(m SignalMatchType) SignalMatchType {
	return i &^ m
}

// Toggle returns the bitmask with the given flag toggled
func (i SignalMatchType) Toggle(m SignalMatchType) SignalMatchType {
	return i ^ m
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SIGNAL_MATCH_ID-1]
	_ = x[SIGNAL_MATCH_DETAIL-2]
	_ = x[SIGNAL_MATCH_CLOSURE-4]
	_ = x[SIGNAL_MATCH_FUNC-8]
	_ = x[SIGNAL_MATCH_DATA-16]
	_ = x[SIGNAL_MATCH_UNBLOCKED-32]
}

const (
	_SignalMatchType_name_0 = "SIGNAL_MATCH_IDSIGNAL_MATCH_DETAIL"
	_SignalMatchType_name_1 = "SIGNAL_MATCH_CLOSURE"
	_SignalMatchType_name_2 = "SIGNAL_MATCH_FUNC"
	_SignalMatchType_name_3 = "SIGNAL_MATCH_DATA"
	_SignalMatchType_name_4 = "SIGNAL_MATCH_UNBLOCKED"
)

var (
	_SignalMatchType_index_0 = [...]uint8{0, 15, 34}
)

func (i SignalMatchType) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _SignalMatchType_name_0[_SignalMatchType_index_0[i]:_SignalMatchType_index_0[i+1]]
	case i == 4:
		return _SignalMatchType_name_1
	case i == 8:
		return _SignalMatchType_name_2
	case i == 16:
		return _SignalMatchType_name_3
	case i == 32:
		return _SignalMatchType_name_4
	default:
		return "SignalMatchType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
