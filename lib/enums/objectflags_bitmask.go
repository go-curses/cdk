// Code generated by "bitmasker -type ObjectFlags"; DO NOT EDIT.

package enums

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the bitmasker command to generate them again.
	var x [1]struct{}
	_ = x[IN_DESTRUCTION-1]
	_ = x[FLOATING-2]
	_ = x[RESERVED_1-4]
	_ = x[RESERVED_2-8]
}

const (
	_ObjectFlags_name_0 = "IN_DESTRUCTIONFLOATING"
	_ObjectFlags_name_1 = "RESERVED_1"
	_ObjectFlags_name_2 = "RESERVED_2"
)

var (
	_ObjectFlags_index_0 = [...]uint8{0, 14, 22}
)

func (i ObjectFlags) String() (value string) {
	update := func(t ObjectFlags, n string) {
		if i.Has(t) {
			if len(value) > 0 {
				value += " | "
			}
			value += n
		}
	}
	update(ObjectFlags(1), _ObjectFlags_name_0[_ObjectFlags_index_0[0]:_ObjectFlags_index_0[0+1]])
	update(ObjectFlags(2), _ObjectFlags_name_0[_ObjectFlags_index_0[1]:_ObjectFlags_index_0[1+1]])
	update(ObjectFlags(4), _ObjectFlags_name_1)
	update(ObjectFlags(8), _ObjectFlags_name_2)
	if value == "" {
		return "ObjectFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return
}

// Has returns TRUE if the given flag is present in the bitmask
func (i ObjectFlags) Has(m ObjectFlags) bool {
	if i == m {
		return true
	}
	return i&m != 0
}

// Set returns the bitmask with the given flag set
func (i ObjectFlags) Set(m ObjectFlags) ObjectFlags {
	return i | m
}

// Clear returns the bitmask with the given flag removed
func (i ObjectFlags) Clear(m ObjectFlags) ObjectFlags {
	return i &^ m
}

// Toggle returns the bitmask with the given flag toggled
func (i ObjectFlags) Toggle(m ObjectFlags) ObjectFlags {
	return i ^ m
}
