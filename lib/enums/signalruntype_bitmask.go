// Code generated by "bitmasker -type SignalRunType"; DO NOT EDIT.

package enums

import "strconv"

// Has returns TRUE if the given flag is present in the bitmask
func (i SignalRunType) Has(m SignalRunType) bool {
	return i&m != 0
}

// Set returns the bitmask with the given flag set
func (i SignalRunType) Set(m SignalRunType) SignalRunType {
	return i | m
}

// Clear returns the bitmask with the given flag removed
func (i SignalRunType) Clear(m SignalRunType) SignalRunType {
	return i &^ m
}

// Toggle returns the bitmask with the given flag toggled
func (i SignalRunType) Toggle(m SignalRunType) SignalRunType {
	return i ^ m
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RUN_FIRST-1]
	_ = x[RUN_LAST-2]
	_ = x[RUN_BOTH-3]
	_ = x[RUN_NO_RECURSE-8]
	_ = x[RUN_ACTION-32]
	_ = x[RUN_NO_HOOKS-64]
}

const (
	_SignalRunType_name_0 = "RUN_FIRSTRUN_LASTRUN_BOTH"
	_SignalRunType_name_1 = "RUN_NO_RECURSE"
	_SignalRunType_name_2 = "RUN_ACTION"
	_SignalRunType_name_3 = "RUN_NO_HOOKS"
)

var (
	_SignalRunType_index_0 = [...]uint8{0, 9, 17, 25}
)

func (i SignalRunType) String() string {
	switch {
	case 1 <= i && i <= 3:
		i -= 1
		return _SignalRunType_name_0[_SignalRunType_index_0[i]:_SignalRunType_index_0[i+1]]
	case i == 8:
		return _SignalRunType_name_1
	case i == 32:
		return _SignalRunType_name_2
	case i == 64:
		return _SignalRunType_name_3
	default:
		return "SignalRunType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
