// Code generated by "bitmasker -type TargetFlags"; DO NOT EDIT.

package enums

import "strconv"

// Has returns TRUE if the given flag is present in the bitmask
func (i TargetFlags) Has(m TargetFlags) bool {
	return i&m != 0
}

// Set returns the bitmask with the given flag set
func (i TargetFlags) Set(m TargetFlags) TargetFlags {
	return i | m
}

// Clear returns the bitmask with the given flag removed
func (i TargetFlags) Clear(m TargetFlags) TargetFlags {
	return i &^ m
}

// Toggle returns the bitmask with the given flag toggled
func (i TargetFlags) Toggle(m TargetFlags) TargetFlags {
	return i ^ m
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TARGET_SAME_APP-1]
	_ = x[TARGET_SAME_WIDGET-2]
	_ = x[TARGET_OTHER_APP-4]
	_ = x[TARGET_OTHER_WIDGET-8]
}

const (
	_TargetFlags_name_0 = "TARGET_SAME_APPTARGET_SAME_WIDGET"
	_TargetFlags_name_1 = "TARGET_OTHER_APP"
	_TargetFlags_name_2 = "TARGET_OTHER_WIDGET"
)

var (
	_TargetFlags_index_0 = [...]uint8{0, 15, 33}
)

func (i TargetFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _TargetFlags_name_0[_TargetFlags_index_0[i]:_TargetFlags_index_0[i+1]]
	case i == 4:
		return _TargetFlags_name_1
	case i == 8:
		return _TargetFlags_name_2
	default:
		return "TargetFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
